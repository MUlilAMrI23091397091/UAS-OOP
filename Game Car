import pygame
import random
import os

# Inisialisasi Pygame
pygame.init()

# Konfigurasi Layar
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Balapan Mobil OOP")

# Warna
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

# Kecepatan permainan
FPS = 30
clock = pygame.time.Clock()

# File untuk menyimpan skor tertinggi
HIGH_SCORE_FILE = "high_score.txt"


# Fungsi untuk membaca skor tertinggi dari file
def read_high_score():
    if os.path.exists(HIGH_SCORE_FILE):
        with open(HIGH_SCORE_FILE, "r") as file:
            return int(file.read())
    else:
        return 0


# Fungsi untuk menyimpan skor tertinggi ke file
def save_high_score(score):
    with open(HIGH_SCORE_FILE, "w") as file:
        file.write(str(score))


# Class untuk mobil pemain
class Car:
    def __init__(self):
        self.width = 50
        self.height = 80
        self.x = WIDTH // 2 - self.width // 2
        self.y = HEIGHT - self.height - 10
        self.speed = 5
        self.image = pygame.image.load("car.png", "mobil").convert_alpha()  # Ganti dengan gambar mobil

    def draw(self):
        screen.blit(self.image, (self.x, self.y))

    def move(self, keys):
        # Gerakan horizontal (kiri/kanan)
        if keys[pygame.K_LEFT] and self.x > 0:
            self.x -= self.speed
        if keys[pygame.K_RIGHT] and self.x < WIDTH - self.width:
            self.x += self.speed

        # Gerakan vertikal (atas/bawah)
        if keys[pygame.K_UP] and self.y > 0:
            self.y -= self.speed
        if keys[pygame.K_DOWN] and self.y < HEIGHT - self.height:
            self.y += self.speed


# Class untuk rintangan
class Obstacle:
    def __init__(self, speed):
        self.width = 30
        self.height = 40
        self.x = random.randint(
            133, 667 - self.width
        )  # Membatasi posisi x di dalam area lebar 534px
        self.y = -self.height  # Memulai rintangan di atas layar
        self.speed = speed  # Kecepatan rintangan
        self.color = RED

    def draw(self):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))

    def move(self):
        self.y += self.speed  # Rintangan bergerak lebih cepat ke bawah


# Class utama untuk mengatur permainan
class Game:
    def __init__(self):
        self.car = Car()
        self.obstacles = []
        self.score = 0
        self.high_score = read_high_score()  # Membaca high score
        self.running = True
        self.background = pygame.image.load(
            "road.png"
        ).convert()  # Ganti dengan gambar jalanan
        self.background = pygame.transform.scale(
            self.background, (WIDTH, HEIGHT)
        )  # Fit cover
        self.bg_y1 = 0
        self.bg_y2 = -HEIGHT  # Gambar kedua dimulai dari posisi negatif

        # Kecepatan awal permainan
        self.bg_speed = 5
        self.obstacle_speed = 6  # Kecepatan rintangan
        self.car_speed = 5

    def run(self):
        while self.running:
            clock.tick(FPS)

            # Menambah skor secara bertahap
            self.score += 1

            # Meningkatkan kecepatan permainan berdasarkan skor
            if self.score % 100 == 0:  # Setiap 100 poin, percepat permainan
                self.bg_speed += 1
                self.obstacle_speed += 1
                self.car_speed += 1

            # Menggerakkan latar belakang (scrolling)
            self.bg_y1 += self.bg_speed  # Kecepatan scrolling
            self.bg_y2 += self.bg_speed  # Kecepatan scrolling

            # Jika gambar latar belakang pertama sudah melewati layar, pindah ke posisi negatif
            if self.bg_y1 >= HEIGHT:
                self.bg_y1 = -HEIGHT
            # Jika gambar latar belakang kedua sudah melewati layar, pindah ke posisi negatif
            if self.bg_y2 >= HEIGHT:
                self.bg_y2 = -HEIGHT

            # Menggambar latar belakang yang bergerak
            screen.blit(self.background, (0, self.bg_y1))  # Gambar pertama
            screen.blit(self.background, (0, self.bg_y2))  # Gambar kedua

            # Event handling
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False

            # Menggerakkan mobil
            keys = pygame.key.get_pressed()
            self.car.move(keys)

            # Menambah rintangan secara periodik
            if random.randint(1, 50) == 1:
                self.obstacles.append(Obstacle(self.obstacle_speed))

            # Menggerakkan dan menggambar rintangan
            for obstacle in self.obstacles:
                obstacle.move()
                obstacle.draw()

                # Deteksi tabrakan
                if self.check_collision(obstacle):
                    print(f"Game Over! Skor akhir: {self.score}")
                    # Update high score jika skor lebih tinggi
                    if self.score > self.high_score:
                        self.high_score = self.score
                        save_high_score(self.high_score)
                    self.running = False

            # Menghapus rintangan yang sudah keluar dari layar
            self.obstacles = [
                obstacle for obstacle in self.obstacles if obstacle.y < HEIGHT
            ]

            # Menggambar mobil
            self.car.draw()

            # Menampilkan skor
            self.display_score()

            # Update layar
            pygame.display.flip()

    def check_collision(self, obstacle):
        return (
            self.car.x < obstacle.x + obstacle.width
            and self.car.x + self.car.width > obstacle.x
            and self.car.y < obstacle.y + obstacle.height
            and self.car.y + self.car.height > obstacle.y
        )

    def display_score(self):
        font = pygame.font.Font(None, 36)
        score_text = font.render(f"Score: {self.score}", True, WHITE)
        screen.blit(score_text, (10, 10))  # Menampilkan skor di sudut kiri atas

        # Menampilkan high score
        high_score_text = font.render(f"High Score: {self.high_score}", True, WHITE)
        screen.blit(
            high_score_text, (WIDTH - 200, 10)
        )  # Menampilkan high score di sudut kanan atas


# Menjalankan game
if __name__ == "__main__":
    game = Game()
    game.run()
    pygame.quit() 
